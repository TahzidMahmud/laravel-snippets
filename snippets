//for raw hxr 
 
 
 <script>
    
          
        
          function update_status(){
            const id=document.getElementById("submit").value
            
            var xhttp = new XMLHttpRequest();
              xhttp.open("GET", `../admin/order-list-update.php?id=${id}`, true);
              xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
              xhttp.onreadystatechange = function() {
                  if (this.readyState == 4 && this.status == 200) {

                      // Response
                      var response = this.responseText; 
                      console.log(response)

                  }
                };
                xhttp.send();
          }
        
       


       
    </script>
    
    
    ///log - in  sign-up

 @if (Route::has('login'))
                <div class="top-right links">
                    @auth
                        <a href="{{ url('/home') }}">Home</a>
                    @else
                        <a href="{{ route('login') }}">Login</a>

                        @if (Route::has('register'))
                            <a href="{{ route('register') }}">Register</a>
                        @endif
                    @endauth
                </div>
            @endif

//axios
 api.axios.get(NEWS_API_URL).then((res)=>{
           console.log(res);
           let articles =res.data.articles;
            if(articles === []){
                p.play('Sorry ,please try searching from a different source');
                return;
            }
            saved_articles=articles;
            p.play({command:'new headlines',saved_articles});
            p.play(`here are the (latest | recent) ${p.source.vluae} news.`);
       }).catch();
//html mixed text

{!! $name !!}.
{!! html_entity_decode($string, ENT_QUOTES, 'UTF-8') !!} use this






Js snippets
===========

for redirecting to a url:
-------------------------
 location.replace("https://www.w3schools.com")
 for refresh:
 -----------
 location.reload()
 
 
 
 
 
 for cart checkout featores
 ==========================
 
 
 
   public function stored_data($identifier)
    {
        if ($identifier instanceof InstanceIdentifier) {
            $identifier = $identifier->getInstanceIdentifier();
        }

        $currentInstance = $this->currentInstance();

        if (!$this->storedCartInstanceWithIdentifierExists($currentInstance, $identifier)) {
            return;
        }

        $stored = $this->getConnection()->table($this->getTableName())
            ->where(['identifier'=> $identifier, 'instance' => $currentInstance])->first();

        $storedContent = unserialize(data_get($stored, 'content'));

        $this->instance(data_get($stored, 'instance'));

        $content = $this->getContent();

        foreach ($storedContent as $cartItem) {
            $content->put($cartItem->rowId, $cartItem);
        }

        $this->events->dispatch('cart.restored');

        $this->session->put($this->instance, $content);

        $this->instance($currentInstance);

        $this->createdAt = Carbon::parse(data_get($stored, 'created_at'));
        $this->updatedAt = Carbon::parse(data_get($stored, 'updated_at'));

      $data= $this->getConnection()->table($this->getTableName())->where(['identifier' => $identifier, 'instance' => $currentInstance])->get();
        return $storedContent;
    }
